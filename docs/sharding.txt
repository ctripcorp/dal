
Sharding（目前指水平分表，垂直分库通过配置已经可以支持）场景分析：

使用Sharding前，用户可以无缝切换到DAS，如果使用了Sharding，需要考虑的事情有很多。

设计原则：切换到DAS后，直连阶段的代码无需任何修改，可以照常工作

表切分(a类型提供直接支持，其他的不提供直接的支持，需要用户在操作的时候区分开来)：
	a. 表结构相同，切分和的表名相同，切分后的表位于不同的数据库中
	b. 表结构相同，切分后的表名不同，切分后的表在同一数据库中
	c. 表结构相同，切分后的表名不同，切分后的表在不同的数据库中 
	d. 单一表中字段太多，将一些字段移动到新的表中
数据库切分：
	a. 单一数据库中表的数量太多，将一些表移动到其他数据库中，框架不需要额外的操作，将数据库配置好即可

1. 单条增删改：
	直接根据条件，判断落在哪个Shard
	如果增删改操作有Cross-Shard，目前是直接报错，未来怎么做？
	建议用户先将操作进行分解，然后分别落向单个Shard进行增删改操作
2. 批量增删改：
	首先对所有数据进行一次Shuffle，然后分为多个Bulk操作落向多个Shard
3. 查询,单Shard操作，直接返回, Cross-Shard, tricky
	a. Sharding依赖于字段，In，Between等查询条件不会直接影响落向哪个Shard，目前的Sharding策略需要用户显示传入Sharding字段的值，即使查询中没有此字段返回或者作为查询条件
	b. 


2014-04-16 
	1. 新的Sharding框架搭建出来
	2. IDAO.cs.tpl参数需要修改于DAO文件一致
	3. CodeGen生成DataTable按照升序排列
	4. 更新DAO失败，解决之
